import { InvestmentWithInvestor } from '@/pages/investments';
import { utils, writeFile } from 'xlsx';

type Data = InvestmentWithInvestor;
export const handleToExcel = async (data: Data[], title: string, filename: string) => {
  console.log('๐ ~ file: downloadExcel.ts:6 ~ handleToExcel ~ title:', title);
  const cleanData = clean(data);
  const wb = utils.book_new();
  const ws = utils.json_to_sheet(cleanData);

  utils.book_append_sheet(wb, ws, title);
  writeFile(wb, `${filename}.xlsx`);
};

const clean = (data: Data[]) => {
  const cleanData = data.map((item) => ({
    ...(item?.investor && { 'ุงุณู ุงููุณุชุซูุฑ': item.investor.name }),
    'ููุน ุงูุงุณุชุซูุงุฑ': item.type === 'BONDS' ? 'ูุฏุงุฆุน' : 'ุดูุงุฏุงุช',
    ุงููุจูุบ: item.amount.toLocaleString(),
    ุงููุงุฆุฏุฉ: item.interestRate * 100,
    'ุชุงุฑูุฎ ุงูุฅุตุฏุงุฑ': new Date(item.createdAt).toLocaleDateString('ar-EG'),
    'ุชุงุฑูุฎ ุงูุงุณุชุญูุงู': new Date(item.redemptionDate).toLocaleDateString('ar-EG'),
    'ุชู ุงูุงุณุชุฑุฏุงุฏ': item.redeemed ? 'ูุนู' : 'ูุง',
    ุงูุจูู: item.bank.bankName,
    'ุฑูู ุงูุญุณุงุจ': item.bank.accountNumber,
    'ุงููููุฉ ุนูุฏ ุงูุงุณุชุญูุงู': item.valueOnMaturity.toLocaleString(),
    'ุฑูู ุงูุงุณุชุซูุงุฑ': item.customId,
    'ุงูุนุงุฆุฏ ุนูู ุงูุงุณุชุซูุงุฑ': `${item.ROI} %`,
  }));
  return cleanData;
};
